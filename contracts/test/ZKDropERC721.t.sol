// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "forge-std/console.sol";
import {ZKDropERC721} from "src/ZKDropERC721.sol";
import {CommitmentMapperRegistryMock} from "test/mocks/CommitmentMapperRegistryMock.sol";
import {AvailableRootsRegistryMock} from "test/mocks/AvailableRootsRegistryMock.sol";
import "zk-connect-solidity/SismoLib.sol";

contract ZKDropERC721Test is Test {
    bytes16 immutable APP_ID = 0x11b1de449c6c4adb0b5775b3868b28b3;
    bytes16 immutable ZK = 0xe9ed316946d3d98dfcd829a53ec9822e;
    address user = 0x7def1d6D28D6bDa49E69fa89aD75d160BEcBa3AE;
    ZKDropERC721 zkdrop;

    address immutable addressesProviderOwner = 0xaee4acd5c4Bf516330ca8fe11B07206fC6709294;

    function setUp() public {
        zkdrop = new ZKDropERC721({
            appId: APP_ID,
            groupId: ZK,
            name: "ZKDrop test",
            symbol: "test",
            baseTokenURI: "https://test.com"
        });
        console.log("ZkDrop contract deployed at", address(zkdrop));

        vm.startPrank(0xa687922C4bf2eB22297FdF89156B49eD3727618b);
        address(0xF3dAc93c85e92cab8f811b3A3cCaCB93140D9304).call(
            abi.encodeWithSignature(
                "registerRoot(uint256)",
                0xa51e98a112191871021d36d20b4812488328eba74a8a23788893026af69af36
            )
        );
        vm.stopPrank();
    }

    function testClaimAndAuthWithSignedMessage() public {
        bytes memory zkConnectResponseEncoded =
            hex"000000000000000000000000000000000000000000000000000000000000002011b1de449c6c4adb0b5775b3868b28b300000000000000000000000000000000b8e2054f8a912367e38a22ce773328ff000000000000000000000000000000007a6b2d636f6e6e6563742d76320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000022068796472612d73322e310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000540e9ed316946d3d98dfcd829a53ec9822e000000000000000000000000000000006c617465737400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000007def1d6d28d6bda49e69fa89ad75d160becba3ae00000000000000000000000000000000000000000000000000000000000002c00b64f961ab740d338d660cc4138c79225e8ecccb78a59dc52311169b6a00f70f27fb5a894b3c5344412bb00a63d13170c6dae480c4459fd41b3354f72064d11116b14847d2b64d7596286adaa13c3353bac911fc5fe0ac183b1775fc94b05218210b28d8fae8cc2bb2ea6d3a46cade59f01cafac0020ef38a21f3811279fb55f02e4a037e75c6a6b6b25ecf2979f65df7524cc0b2ab20d4270afb7610f1c49ae2372edacdf9eeb686cb4eee42490c1f918f4246fc4606b0d599e12bdacd20345249c36d3e6aeee76be3aaed8cd1f3d781ef91641f671cc9f44e3bda10643bd0d24b30bb0ed6d10e0663b8b1d6a4eeda5a868d54f63faa951f2ef159ce27556dd000000000000000000000000000000000000000000000000000000000000000009f60d972df499264335faccfc437669a97ea2b6c97a1a7ddf3f0105eda34b1d2ab71fb864979b71106135acfa84afc1d756cda74f8f258896f896b4864f025630423b4c502f1cd4179a425723bf1e15c843733af2ecdee9aef6a0451ef2db740a51e98a112191871021d36d20b4812488328eba74a8a23788893026af69af3604f81599b826fa9b715033e76e5b2fdda881352a9b61360022e30ee33ddccad90744e9b92802056c722ac4b31612e1b1de544d5b99481386b162a0b59862e0850000000000000000000000000000000000000000000000000000000000000001285bf79dc20d58e71b9712cb38c420b9cb91d3438c8e3dbaf07829b03ffffffc0000000000000000000000000000000000000000000000000000000000000000174c0f7d68550e40962c4ae6db9b04940288cb4aeede625dd8a9b0964939cdeb0000000000000000000000000000000011b1de449c6c4adb0b5775b3868b28b3000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        zkdrop.claimWithZkConnect(zkConnectResponseEncoded, user);
    }

    function getEdDSAPubKey() public pure returns (uint256[2] memory) {
        return [
            0x7f6c5612eb579788478789deccb06cf0eb168e457eea490af754922939ebdb9,
            0x20706798455f90ed993f8dac8075fc1538738a25f0c928da905c0dffd81869fa
        ];
    }

    function getRoot() public pure returns (uint256) {
        return 0x1d4a72bd1c1e4f9ab68c3c4c55afd3e582685a18b9ec09fc96136619d2513fe8;
    }
}
